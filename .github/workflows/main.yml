name: Deploy server
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:

  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    defaults:
      run:
        working-directory: iac
    outputs:
      ip: ${{ steps.obtain_ip.outputs.ip }}
    steps:
      - uses: actions/checkout@v2
      - name: terraform init
        run: |
          terraform init -input=false \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ env.TF_STATE_KEY }}"
        env:
          TF_STATE_BUCKET: appserver-tfstate
          TF_STATE_KEY: appserver.tfstate
      - name: terraform plan
        run: |
          terraform plan \
            -var="hosted_zone_id=${{ env.HOSTED_ZONE_ID }}" \
            -var='sub_domains=${{ env.SUB_DOMAINS }}' \
            -out=tfplan \
            -input=false
        env:
          HOSTED_ZONE_ID: Z01458071JP9I1MITIR07
          SUB_DOMAINS: '[ "hiveshop" ]'
      - name: terraform apply
        run: |
          terraform apply \
            -input=false \
            tfplan
      - name: obtain ip
        id: obtain_ip
        run: |
          SERVER_IP=$(terraform output -raw server_ip)
          echo "::set-output name=ip::$SERVER_IP"

  configure-server:
    runs-on: ubuntu-latest
    needs: deploy
    defaults:
      run:
        working-directory: playbooks
    steps:
      - uses: actions/checkout@v2
      - run: echo ${{ needs.deploy.outputs.ip }} >> inventory.ansible
      - name: Setup SSH key
        run: |
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< $(echo "${{ secrets.SSH_PRIVATE_KEY }}" | base64 -d)
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      - run: |
          ANSIBLE_HOST_KEY_CHECKING=false ansible-playbook \
            --inventory inventory.ansible \
            --user ubuntu \
            main.yml
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
  
  configure-proxy:
    runs-on: ubuntu-latest
    needs: [configure-server, deploy]
    env:
      SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      SERVER_IP: ${{ needs.deploy.outputs.ip }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/checkout@v2
        with:
          repository: Dunklas/frontman
          ref: docker-contexts
          path: frontman
        name: Checkout frontman
      - run: cp servers.json frontman/
      - name: Setup SSH key
        run: |
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< $(echo "${{ secrets.SSH_PRIVATE_KEY }}" | base64 -d)
      - name: Allow server
        run: mkdir ~/.ssh && echo -e "Host ${{ env.SERVER_IP }}\n\tStrictHostKeyChecking no" > ~/.ssh/config
      - name: Setup docker context
        run: docker context create remote --docker "host=ssh://ubuntu@${{ env.SERVER_IP }}"
      - name: Start reverse proxy
        run: DOCKER_CONTEXT=remote make start
        working-directory: frontman
